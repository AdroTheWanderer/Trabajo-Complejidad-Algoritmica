def find_paths(node, cities, path, distance):
    # Add a way point
    path.append(node)

    # Calculate the path length from current to the last node
    if len(path) > 1:
        distance += cities[path[-2]][node]

    # If path contains all cities and is not a dead end, add path from last to first city and return.
    if (len(cities) == len(path)) and (path[0] in cities[path[-1]]):
        global rutas
        path.append(path[0])
        distance += cities[path[-2]][path[0]]
        print (path, distance)
        rutas.append([distance, path])
        return

    # Fork paths for all the possible cities not yet used
    for city in cities:
        if (city not in path) and (node in cities[city]):
            find_paths(city, dict(cities), list(path), distance)
